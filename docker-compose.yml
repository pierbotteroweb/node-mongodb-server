services:
  mongo1:
    image: mongo:6.0
    container_name: mongo1
    hostname: mongo1
    volumes:
      - G:/node-mongodb-local-server/mongodb-backups:/backups
      - mongo1-data:/data/db
    ports:
      - "27017:27017"
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]
    networks:
      - mongo-replica-net
    restart: always
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5

  mongo2:
    image: mongo:6.0
    container_name: mongo2
    hostname: mongo2
    volumes:
      - mongo2-data:/data/db
    ports:
      - "27018:27017"
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]
    networks:
      - mongo-replica-net
    restart: always
    depends_on:
      - mongo1
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5

  mongo3:
    image: mongo:6.0
    container_name: mongo3
    hostname: mongo3
    volumes:
      - mongo3-data:/data/db
    ports:
      - "27019:27017"
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]
    networks:
      - mongo-replica-net
    restart: always
    depends_on:
      - mongo2
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5

  mongo-init:
    image: mongo:6.0
    container_name: mongo-init
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    networks:
      - mongo-replica-net
    restart: on-failure
    entrypoint: [ "mongosh", "--host", "mongo1", "--eval", "rs.initiate({_id: 'rs0', members: [{_id: 0, host: 'mongo1:27017'}, {_id: 1, host: 'mongo2:27017'}, {_id: 2, host: 'mongo3:27017'}]})" ]

networks:
  mongo-replica-net:
    driver: bridge

volumes:
  mongo1-data:
  mongo2-data:
  mongo3-data: